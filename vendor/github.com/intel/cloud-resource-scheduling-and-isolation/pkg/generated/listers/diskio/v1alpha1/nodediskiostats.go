/*
Copyright 2024 Intel Corporation

Licensed under the Apache License, Version 2.0 (the License);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/intel/cloud-resource-scheduling-and-isolation/pkg/api/diskio/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NodeDiskIOStatsLister helps list NodeDiskIOStatses.
// All objects returned here must be treated as read-only.
type NodeDiskIOStatsLister interface {
	// List lists all NodeDiskIOStatses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NodeDiskIOStats, err error)
	// NodeDiskIOStatses returns an object that can list and get NodeDiskIOStatses.
	NodeDiskIOStatses(namespace string) NodeDiskIOStatsNamespaceLister
	NodeDiskIOStatsListerExpansion
}

// nodeDiskIOStatsLister implements the NodeDiskIOStatsLister interface.
type nodeDiskIOStatsLister struct {
	indexer cache.Indexer
}

// NewNodeDiskIOStatsLister returns a new NodeDiskIOStatsLister.
func NewNodeDiskIOStatsLister(indexer cache.Indexer) NodeDiskIOStatsLister {
	return &nodeDiskIOStatsLister{indexer: indexer}
}

// List lists all NodeDiskIOStatses in the indexer.
func (s *nodeDiskIOStatsLister) List(selector labels.Selector) (ret []*v1alpha1.NodeDiskIOStats, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NodeDiskIOStats))
	})
	return ret, err
}

// NodeDiskIOStatses returns an object that can list and get NodeDiskIOStatses.
func (s *nodeDiskIOStatsLister) NodeDiskIOStatses(namespace string) NodeDiskIOStatsNamespaceLister {
	return nodeDiskIOStatsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NodeDiskIOStatsNamespaceLister helps list and get NodeDiskIOStatses.
// All objects returned here must be treated as read-only.
type NodeDiskIOStatsNamespaceLister interface {
	// List lists all NodeDiskIOStatses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NodeDiskIOStats, err error)
	// Get retrieves the NodeDiskIOStats from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NodeDiskIOStats, error)
	NodeDiskIOStatsNamespaceListerExpansion
}

// nodeDiskIOStatsNamespaceLister implements the NodeDiskIOStatsNamespaceLister
// interface.
type nodeDiskIOStatsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NodeDiskIOStatses in the indexer for a given namespace.
func (s nodeDiskIOStatsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NodeDiskIOStats, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NodeDiskIOStats))
	})
	return ret, err
}

// Get retrieves the NodeDiskIOStats from the indexer for a given namespace and name.
func (s nodeDiskIOStatsNamespaceLister) Get(name string) (*v1alpha1.NodeDiskIOStats, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("nodediskiostats"), name)
	}
	return obj.(*v1alpha1.NodeDiskIOStats), nil
}
