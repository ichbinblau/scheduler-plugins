/*
Copyright 2024 Intel Corporation

Licensed under the Apache License, Version 2.0 (the License);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/intel/cloud-resource-scheduling-and-isolation/pkg/api/diskio/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NodeDiskDeviceLister helps list NodeDiskDevices.
// All objects returned here must be treated as read-only.
type NodeDiskDeviceLister interface {
	// List lists all NodeDiskDevices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NodeDiskDevice, err error)
	// NodeDiskDevices returns an object that can list and get NodeDiskDevices.
	NodeDiskDevices(namespace string) NodeDiskDeviceNamespaceLister
	NodeDiskDeviceListerExpansion
}

// nodeDiskDeviceLister implements the NodeDiskDeviceLister interface.
type nodeDiskDeviceLister struct {
	indexer cache.Indexer
}

// NewNodeDiskDeviceLister returns a new NodeDiskDeviceLister.
func NewNodeDiskDeviceLister(indexer cache.Indexer) NodeDiskDeviceLister {
	return &nodeDiskDeviceLister{indexer: indexer}
}

// List lists all NodeDiskDevices in the indexer.
func (s *nodeDiskDeviceLister) List(selector labels.Selector) (ret []*v1alpha1.NodeDiskDevice, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NodeDiskDevice))
	})
	return ret, err
}

// NodeDiskDevices returns an object that can list and get NodeDiskDevices.
func (s *nodeDiskDeviceLister) NodeDiskDevices(namespace string) NodeDiskDeviceNamespaceLister {
	return nodeDiskDeviceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NodeDiskDeviceNamespaceLister helps list and get NodeDiskDevices.
// All objects returned here must be treated as read-only.
type NodeDiskDeviceNamespaceLister interface {
	// List lists all NodeDiskDevices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NodeDiskDevice, err error)
	// Get retrieves the NodeDiskDevice from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NodeDiskDevice, error)
	NodeDiskDeviceNamespaceListerExpansion
}

// nodeDiskDeviceNamespaceLister implements the NodeDiskDeviceNamespaceLister
// interface.
type nodeDiskDeviceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NodeDiskDevices in the indexer for a given namespace.
func (s nodeDiskDeviceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NodeDiskDevice, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NodeDiskDevice))
	})
	return ret, err
}

// Get retrieves the NodeDiskDevice from the indexer for a given namespace and name.
func (s nodeDiskDeviceNamespaceLister) Get(name string) (*v1alpha1.NodeDiskDevice, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("nodediskdevice"), name)
	}
	return obj.(*v1alpha1.NodeDiskDevice), nil
}
