apiVersion: v1
kind: ServiceAccount
metadata:
  name: diskio-aware-scheduler
  namespace: kube-system
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: diskioaware-handler
rules:
- apiGroups: ["diskio.x-k8s.io"]
  resources: ["nodediskdevices"]
  verbs: ["get", "list", "watch", "create"] # todo: change it back
- apiGroups: ["diskio.x-k8s.io"]
  resources: 
  - nodediskiostats
  - nodediskiostats/status
  verbs: ["create","get", "update", "patch","watch", "list"] # todo: check permission
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get","list","watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: diskio-aware-scheduler-as-kube-scheduler
subjects:
  - kind: ServiceAccount
    name: diskio-aware-scheduler
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: diskioaware-handler
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-scheduler-as-volume-scheduler
subjects:
- kind: ServiceAccount
  name: my-scheduler
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: system:volume-scheduler
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: diskio-aware-scheduler-as-kube-scheduler
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: diskio-aware-scheduler
    namespace: kube-system
roleRef:
  kind: Role
  name: extension-apiserver-authentication-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: diskioaware
  namespace: kube-system
subjects:
- kind: User
  name: system:kube-scheduler
  namespace: kube-system
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: diskioaware-handler
  apiGroup: rbac.authorization.k8s.io
